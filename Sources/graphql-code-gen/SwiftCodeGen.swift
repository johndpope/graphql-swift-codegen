//
//  SwiftCodeGen.swift
//  graphql-swift-codegen
//
//  Copyright Â© 2015 Todd Berman. All rights reserved.
//

import Foundation

class SwiftTypeReference {
    let typeName: String
    let genericParameters: [SwiftTypeReference]
    
    init(_ typeName: String, genericParameters: [SwiftTypeReference] = []) {
        self.typeName = typeName
        self.genericParameters = genericParameters
    }
    
    func wrapOptional() -> SwiftTypeReference {
        return SwiftTypeReference("Optional", genericParameters: [self])
    }
    
    func unwrapOptional() -> SwiftTypeReference {
        if typeName == "Optional" {
            return genericParameters[0]
        }
        
        return self
    }

    
    var code: String {
        switch (typeName) {
        case "Optional":
            return genericParameters[0].code + "?"
        case "Array":
            return "[" + genericParameters[0].code + "]"
        default:
            var c = typeName
            
            if genericParameters.count > 0 {
                c = c + "<" + (genericParameters.map { $0.code }).joined(separator: ", ") + ">"
            }
            
            return c
        }
    }
}


class SwiftTypeBuilder {
    
    let name: String
    let kind: Kind
    let members: [SwiftMemberBuilder]
    let inheritedTypes: [SwiftTypeReference]
    let fields:[SwiftMemberBuilder]
    

    
    convenience init(_ name: String, _ kind: Kind, _ members: [SwiftMemberBuilder],fields:[SwiftMemberBuilder]) {
        self.init(name, kind, members, [],[])
    }
    
    init (_ name: String, _ kind: Kind, _ members: [SwiftMemberBuilder], _ inheritedTypes: [SwiftTypeReference],_ fields:[SwiftMemberBuilder]) {
        self.name = name
        self.kind = kind
        self.members = members
        self.inheritedTypes = inheritedTypes
        self.fields = fields
        
        
        
    }
    
    var code: String {
        let preamble = "// generated by graphql-swift-codegen at \(NSDate().description)\n\n\nimport Unbox\n\n"
        
        var superClass = "Unboxable"
        if(inheritedTypes.count > 0){
            superClass =  (inheritedTypes.map { $0.code }.joined(separator: ","))
        }
        var typeClass = "struct"
        if(kind.rawValue != "class"){
            typeClass = kind.rawValue
        }
        let typeDeclaration = "\(typeClass) \(name) :" + superClass
        
        let membersCode = members.map { "    " + $0.code}.joined(separator: "\n")
        
        let unboxInitCode =  "    init(unboxer: Unboxer) throws { \n" + // unboxer begin
        fields.map { "    " + $0.code}.joined(separator: "\n")
        if (fields.count == 0){
            print("WARNING - no fields")
            if true{
                
            }
        }
        
        return
            "\(preamble)" + "\n\n" +
            "\(typeDeclaration) {\n" +
              membersCode + "\n\n" +
              unboxInitCode + "\n" +
              "    }\n"  + // unboxed end
            "}\n"
    }
    
    enum Kind: String {
        case Class = "class"
        case `Protocol` = "protocol"
        case Enum = "enum"
    }
}

protocol SwiftMemberBuilder {
    var code: String { get }
}

class UnboxerFieldBuilder:SwiftMemberBuilder {
    let name: String
    let typeReference: SwiftTypeReference
    let field:GraphQLFieldDescription?
    let inputField:GraphQLInputFieldDescription?
    
    
    init(_ name: String, _ typeReference: SwiftTypeReference,_ field:GraphQLFieldDescription?,_ inputField:GraphQLInputFieldDescription?) {
        self.name = name
        self.typeReference = typeReference
        
        self.field = field
        self.inputField = inputField
    }
    
    var code: String {
       // contentId =   unboxer.unbox(key: "contentId")
        //" \(name) = try Unboxer.performCustomUnboxing(dictionary: unboxer.dictionary, closure: { unboxer in " +
        // "    let milestones: [Media] = try unboxer.unbox(key: "")  //\(name) ";

        if (typeReference.typeName == "Optional"){
           return " \(name) =  unboxer.unbox(key: \"\(name)\")"
        }else{
            return " \(name) = try unboxer.unbox(key: \"\(name)\")"
            
        }

    }
}

class SwiftFieldBuilder: SwiftMemberBuilder {
    let name: String
    let typeReference: SwiftTypeReference
    
    init(_ name: String, _ typeReference: SwiftTypeReference) {
        self.name = name
        self.typeReference = typeReference
    }
    
    var code: String {
        return "var \(name): \(typeReference.code)"
    }
}

class SwiftEnumValueBuilder: SwiftMemberBuilder {
    let name: String
    let value: String
    
    init(_ name: String, _ value: String) {
        self.name = name
        self.value = value
    }
    
    var code: String {
        return "case \(name) = \"\(value)\""
    }
}
